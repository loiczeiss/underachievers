// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Optional fields
  access_token      String? // Optional fields
  expires_at        Int? // Optional fields
  token_type        String? // Optional fields
  scope             String? // Optional fields
  id_token          String? // Optional fields
  session_state     String? // Optional fields
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId]) // Compound unique constraint
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  textPost      TextPost[]
  imgPost       ImgPost[]
  Comment       Comment[]
  AudioPost     AudioPost[]
  Like          Like[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String? // For likes on posts
  commentId String? // For likes on comments
  postType  PostType // Enum to determine the type of post
  createdAt DateTime @default(now())

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  textPost  TextPost?  @relation(fields: [postId], references: [id], onDelete: Cascade, map: "Like_TextPost_postId_fkey")
  imgPost   ImgPost?   @relation(fields: [postId], references: [id], onDelete: Cascade, map: "Like_ImgPost_postId_fkey")
  audioPost AudioPost? @relation(fields: [postId], references: [id], onDelete: Cascade, map: "Like_AudioPost_postId_fkey")
  comment   Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade, map: "Like_Comment_commentId_fkey")

  @@unique([userId, postId, commentId]) // Ensures a user can only like an entity once
}

model TextPost {
  id      String @id @default(cuid())
  title   String
  content String
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
}

model ImgPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  imgUrl    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes    Like[]
}

model AudioPost {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  audioId   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  audio     Audio     @relation(fields: [audioId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
}

model Image {
  id        String   @id @default(uuid())
  publicId  String   @unique
  url       String   @unique
  width     Int
  height    Int
  format    String
  createdAt DateTime @default(now())
}

model Audio {
  id           String   @id @default(uuid())
  publicId     String   @unique
  url          String   @unique
  displayName  String
  playbackUrl  String   @unique
  thumbnailUrl String
  duration     Int
  format       String
  createdAt    DateTime @default(now())

  AudioPost AudioPost[]
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  userName    String
  userImage   String
  userId      String
  textPostId  String?
  imgPostId   String?
  audioPostId String?
  postType    PostType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  textPost  TextPost?  @relation(fields: [textPostId], references: [id], onDelete: Cascade, map: "Comment_TextPost_textPostId_fkey")
  imgPost   ImgPost?   @relation(fields: [imgPostId], references: [id], onDelete: Cascade, map: "Comment_ImgPost_imgPostId_fkey")
  audioPost AudioPost? @relation(fields: [audioPostId], references: [id], onDelete: Cascade)
  likes     Like[]
}

enum PostType {
  TEXT
  IMAGE
  AUDIO // Add AUDIO type for AudioPost
}
