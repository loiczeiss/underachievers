generator client {
  provider = "prisma-client-js"
}

generator custom_generator {
  provider = "prisma-generator-fake-data"
  /// by default, the file will be generated at `./prisma/fake-data.mts`
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  AudioPost     AudioPost[]
  Comment       Comment[]
  imgPost       ImgPost[]
  sessions      Session[]
  textPost      TextPost[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model TextPost {
  id        String    @id @default(cuid())
  title     String
  content   String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  postType  PostType
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Vote      Vote[]
}

model ImgPost {
  id          String    @id @default(cuid())
  title       String
  content     String
  imgUrl      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  imgPublicId String
  postType    PostType
  comments    Comment[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Vote        Vote[]
}

model AudioPost {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  audioId   String
  postType  PostType
  audio     Audio     @relation(fields: [audioId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  Vote      Vote[]
}

model Image {
  id        String   @id @default(uuid())
  publicId  String   @unique
  url       String   @unique
  width     Int
  height    Int
  format    String
  createdAt DateTime @default(now())
}

model Audio {
  id           String      @id @default(uuid())
  publicId     String      @unique
  url          String      @unique
  displayName  String
  playbackUrl  String      @unique
  thumbnailUrl String
  duration     Int
  format       String
  createdAt    DateTime    @default(now())
  userId       String
  AudioPost    AudioPost[]
}

model Comment {
  id          String     @id @default(cuid())
  content     String
  userId      String
  postType    PostType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  imgPostId   String?
  textPostId  String?
  userImage   String
  userName    String
  audioPostId String?
  parentId    String?
  imgPost     ImgPost?   @relation(fields: [imgPostId], references: [id], onDelete: Cascade, map: "Comment_ImgPost_imgPostId_fkey")
  textPost    TextPost?  @relation(fields: [textPostId], references: [id], onDelete: Cascade, map: "Comment_TextPost_textPostId_fkey")
  audioPost   AudioPost? @relation(fields: [audioPostId], references: [id], onDelete: Cascade)
  parent      Comment?   @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[]  @relation("CommentToComment")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Vote        Vote[]
}

model Vote {
  id          String     @id @default(cuid())
  voteType    VoteType
  imgPostId   String?
  userId      String
  textPostId  String?
  audioPostId String?
  commentId   String?
  postType    PostType
  AudioPost   AudioPost? @relation(fields: [audioPostId], references: [id])
  Comment     Comment?   @relation(fields: [commentId], references: [id])
  ImgPost     ImgPost?   @relation(fields: [imgPostId], references: [id])
  TextPost    TextPost?  @relation(fields: [textPostId], references: [id])
}

enum VoteType {
  UP
  DOWN
}

enum PostType {
  TEXT
  IMAGE
  AUDIO
}
