// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  // Optional fields
  access_token      String?  // Optional fields
  expires_at        Int?     // Optional fields
  token_type        String?  // Optional fields
  scope             String?  // Optional fields
  id_token          String?  // Optional fields
  session_state     String?  // Optional fields
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId]) // Compound unique constraint
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  textPost          TextPost[]
  imgPost ImgPost[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model TextPost {
  id      String @id @default(cuid())
  title   String
  content String
  userId  String


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model ImgPost {
  id String @id @default(cuid())
  title String
  content String
  
  imgUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId  String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Image {
  id        String   @id @default(uuid())
  publicId  String   @unique
  url       String @unique
  width     Int
  height    Int
  format    String
  createdAt DateTime @default(now())
}
model Audio {
  id String @id @default(uuid())
  publicId String @unique
  url String @unique
  displayName String
  playbackUrl String @unique
  thumbnailUrl String
  duration Int
  format String
  createdAt DateTime @default(now())
}
model Comment {
  id         String    @id @default(cuid())
  content    String
    userName          String
      userImage         String
  userId     String
  textPostId String?
  imgPostId  String?
  postType   PostType
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  textPost   TextPost? @relation(fields: [textPostId], references: [id], onDelete: Cascade, map: "Comment_TextPost_textPostId_fkey")
  imgPost    ImgPost?  @relation(fields: [imgPostId], references: [id], onDelete: Cascade, map: "Comment_ImgPost_imgPostId_fkey")
}

enum PostType {
  TEXT
  IMAGE
}